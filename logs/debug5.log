===================================
Execution Stack
[[print(a);a = 2];int a]

Symbol Table

Output
[]
===================================
Execution Stack
int a
[print(a);a = 2]

Symbol Table

Output
[]
===================================
Execution Stack
[print(a);a = 2]

Symbol Table
a --> 0

Output
[]
===================================
Execution Stack
a = 2
print(a)

Symbol Table
a --> 0

Output
[]
===================================
Execution Stack
print(a)

Symbol Table
a --> 2

Output
[]
===================================
Execution Stack

Symbol Table
a --> 2

Output
[2]
===================================
Execution Stack
[print(b);[[b = 3*5+2+1;a = 3*5+2];[int b;int a]]]

Symbol Table

Output
[]
===================================
Execution Stack
[[b = 3*5+2+1;a = 3*5+2];[int b;int a]]
print(b)

Symbol Table

Output
[]
===================================
Execution Stack
[int b;int a]
[b = 3*5+2+1;a = 3*5+2]
print(b)

Symbol Table

Output
[]
===================================
Execution Stack
int a
int b
[b = 3*5+2+1;a = 3*5+2]
print(b)

Symbol Table

Output
[]
===================================
Execution Stack
int b
[b = 3*5+2+1;a = 3*5+2]
print(b)

Symbol Table
a --> 0

Output
[]
===================================
Execution Stack
[b = 3*5+2+1;a = 3*5+2]
print(b)

Symbol Table
b --> 0
a --> 0

Output
[]
===================================
Execution Stack
a = 3*5+2
b = 3*5+2+1
print(b)

Symbol Table
b --> 0
a --> 0

Output
[]
===================================
Execution Stack
b = 3*5+2+1
print(b)

Symbol Table
b --> 0
a --> 17

Output
[]
===================================
Execution Stack
print(b)

Symbol Table
b --> 18
a --> 17

Output
[]
===================================
Execution Stack

Symbol Table
b --> 18
a --> 17

Output
[18]
===================================
Execution Stack
[print(v);[If(a==true)Then{v = 2}Else{v = 3};[a = true;[int v;bool a]]]]

Symbol Table

Output
[]
===================================
Execution Stack
[If(a==true)Then{v = 2}Else{v = 3};[a = true;[int v;bool a]]]
print(v)

Symbol Table

Output
[]
===================================
Execution Stack
[a = true;[int v;bool a]]
If(a==true)Then{v = 2}Else{v = 3}
print(v)

Symbol Table

Output
[]
===================================
Execution Stack
[int v;bool a]
a = true
If(a==true)Then{v = 2}Else{v = 3}
print(v)

Symbol Table

Output
[]
===================================
Execution Stack
bool a
int v
a = true
If(a==true)Then{v = 2}Else{v = 3}
print(v)

Symbol Table

Output
[]
===================================
Execution Stack
int v
a = true
If(a==true)Then{v = 2}Else{v = 3}
print(v)

Symbol Table
a --> false

Output
[]
===================================
Execution Stack
a = true
If(a==true)Then{v = 2}Else{v = 3}
print(v)

Symbol Table
a --> false
v --> 0

Output
[]
===================================
Execution Stack
If(a==true)Then{v = 2}Else{v = 3}
print(v)

Symbol Table
a --> true
v --> 0

Output
[]
===================================
Execution Stack
v = 2
print(v)

Symbol Table
a --> true
v --> 0

Output
[]
===================================
Execution Stack
print(v)

Symbol Table
a --> true
v --> 2

Output
[]
===================================
Execution Stack

Symbol Table
a --> true
v --> 2

Output
[2]
===================================
Execution Stack
[[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]];[[[OpenFile{newString};newString = merge.txt];string newString];[a = 2;int a]]]

Symbol Table

Output
[]
===================================
Execution Stack
[[[OpenFile{newString};newString = merge.txt];string newString];[a = 2;int a]]
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table

Output
[]
===================================
Execution Stack
[a = 2;int a]
[[OpenFile{newString};newString = merge.txt];string newString]
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table

Output
[]
===================================
Execution Stack
int a
a = 2
[[OpenFile{newString};newString = merge.txt];string newString]
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table

Output
[]
===================================
Execution Stack
a = 2
[[OpenFile{newString};newString = merge.txt];string newString]
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table
a --> 0

Output
[]
===================================
Execution Stack
[[OpenFile{newString};newString = merge.txt];string newString]
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table
a --> 2

Output
[]
===================================
Execution Stack
string newString
[OpenFile{newString};newString = merge.txt]
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table
a --> 2

Output
[]
===================================
Execution Stack
[OpenFile{newString};newString = merge.txt]
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table
a --> 2
newString --> 

Output
[]
===================================
Execution Stack
newString = merge.txt
OpenFile{newString}
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table
a --> 2
newString --> 

Output
[]
===================================
Execution Stack
OpenFile{newString}
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table
a --> 2
newString --> merge.txt

Output
[]
===================================
Execution Stack
[CloseFileStatement{newString};[ReadFile{newString,a};ReadFile{newString,a}]]

Symbol Table
a --> 2
newString --> merge.txt

Output
[]
===================================
Execution Stack
[ReadFile{newString,a};ReadFile{newString,a}]
CloseFileStatement{newString}

Symbol Table
a --> 2
newString --> merge.txt

Output
[]
===================================
Execution Stack
ReadFile{newString,a}
ReadFile{newString,a}
CloseFileStatement{newString}

Symbol Table
a --> 2
newString --> merge.txt

Output
[]
===================================
Execution Stack
ReadFile{newString,a}
CloseFileStatement{newString}

Symbol Table
a --> 101
newString --> merge.txt

Output
[]
===================================
Execution Stack
CloseFileStatement{newString}

Symbol Table
a --> 102
newString --> merge.txt

Output
[]
===================================
Execution Stack

Symbol Table
a --> 102
newString --> merge.txt

Output
[]
===================================
Execution Stack
[[c = a <= b;bool c];[[b = 9;int b];[a = 3;int a]]]

Symbol Table

Output
[]
===================================
Execution Stack
[[b = 9;int b];[a = 3;int a]]
[c = a <= b;bool c]

Symbol Table

Output
[]
===================================
Execution Stack
[a = 3;int a]
[b = 9;int b]
[c = a <= b;bool c]

Symbol Table

Output
[]
===================================
Execution Stack
int a
a = 3
[b = 9;int b]
[c = a <= b;bool c]

Symbol Table

Output
[]
===================================
Execution Stack
a = 3
[b = 9;int b]
[c = a <= b;bool c]

Symbol Table
a --> 0

Output
[]
===================================
Execution Stack
[b = 9;int b]
[c = a <= b;bool c]

Symbol Table
a --> 3

Output
[]
===================================
Execution Stack
int b
b = 9
[c = a <= b;bool c]

Symbol Table
a --> 3

Output
[]
===================================
Execution Stack
b = 9
[c = a <= b;bool c]

Symbol Table
b --> 0
a --> 3

Output
[]
===================================
Execution Stack
[c = a <= b;bool c]

Symbol Table
b --> 9
a --> 3

Output
[]
===================================
Execution Stack
bool c
c = a <= b

Symbol Table
b --> 9
a --> 3

Output
[]
===================================
Execution Stack
c = a <= b

Symbol Table
b --> 9
a --> 3
c --> false

Output
[]
===================================
Execution Stack

Symbol Table
b --> 9
a --> 3
c --> true

Output
[]
